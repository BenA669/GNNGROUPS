tensor([ 2,  2,  2,  2,  2,  2,  2,  2,  2, -1,  2,  2, -1,  2,  1,  2, -1, -1,
         2,  1, -1,  1,  1,  1, -1,  1,  2,  1,  1, -1, -1,  2, -1, -1, -1, -1,
         1,  2,  1,  2,  2, -1, -1, -1, -1,  1,  1, -1,  1, -1, -1, -1, -1,  2,
        -1, -1,  2, -1, -1,  2, -1, -1,  2,  2, -1, -1,  2,  2,  2, -1, -1, -1,
        -1,  2,  2, -1,  2, -1, -1,  2, -1,  2,  2,  2, -1,  2, -1,  2, -1,  1,
         2, -1,  2,  2, -1,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  2, -1, -1, -1, -1, -1, -1, -1,
         2, -1,  1, -1,  2, -1, -1, -1, -1,  2, -1, -1, -1, -1, -1,  2,  0,  2,
        -1,  1,  2, -1, -1, -1,  2,  2, -1, -1, -1,  2, -1, -1, -1, -1,  2, -1,
        -1, -1, -1, -1,  2, -1, -1,  2, -1, -1, -1,  2,  2, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1,  2, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1,  2, -1, -1, -1, -1, -1,  2,  1, -1, -1, -1, -1,  1, -1,
        -1, -1, -1, -1, -1,  1, -1,  1,  1,  1, -1, -1,  1, -1,  1, -1, -1, -1,
        -1, -1,  2, -1, -1, -1, -1, -1,  1, -1, -1, -1,  1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  1, -1, -1, -1, -1, -1,  1, -1,
         1, -1, -1, -1, -1, -1,  1, -1,  1, -1,  2, -1,  2, -1,  2, -1, -1, -1,
         1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1, -1, -1,  1, -1,  1,  1, -1,
        -1,  1,  1,  1, -1, -1,  1, -1, -1, -1, -1, -1,  2, -1, -1, -1, -1,  2,
        -1, -1, -1, -1,  2, -1,  1, -1, -1, -1, -1,  2, -1, -1, -1, -1, -1,  2,
        -1,  2, -1,  2,  1,  2,  1,  2,  1,  2,  2,  2,  2,  2,  2, -1, -1,  2,
         1,  2, -1, -1, -1,  2,  2,  2, -1,  2, -1,  2, -1,  2,  2, -1, -1,  2,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1,  2,  2, -1, -1, -1, -1,  1,  1, -1, -1, -1, -1,
         1, -1, -1, -1, -1, -1, -1,  1, -1,  2,  1,  1, -1, -1,  0, -1,  1, -1,
        -1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1, -1, -1, -1,  1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1, -1, -1, -1, -1, -1,
         1, -1,  1, -1, -1, -1, -1, -1,  2, -1,  2, -1, -1, -1,  2, -1, -1, -1,
        -1, -1,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1, -1, -1,  1, -1,  2,
         1, -1, -1,  2,  1,  1, -1, -1,  1, -1, -1, -1, -1, -1,  2, -1, -1, -1,
        -1,  1, -1, -1,  2, -1,  1, -1,  1, -1, -1, -1, -1,  1, -1, -1, -1, -1,
        -1,  1,  2,  1, -1,  1,  1,  2,  2,  2,  1,  1,  2,  1,  2,  2,  2,  2,
         2,  2,  1,  2, -1, -1,  2,  1,  2,  1,  2,  1, -1,  1,  2,  1,  1, -1,
        -1,  1, -1, -1, -1, -1,  2,  2,  2, -1, -1, -1, -1,  2, -1,  2,  2, -1,
         2, -1, -1, -1, -1,  2, -1, -1,  1,  2, -1, -1, -1, -1,  1,  1,  2, -1,
         2, -1,  1, -1, -1, -1, -1,  2, -1,  1,  2,  2,  2,  1, -1, -1,  1, -1,
         2, -1, -1, -1, -1,  2,  1, -1, -1, -1, -1, -1,  2, -1, -1, -1,  2, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  2,  2,  1, -1, -1, -1,
        -1, -1,  2, -1,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1,  2, -1, -1,  2,
        -1,  2,  2, -1, -1,  2,  2,  2, -1, -1,  2, -1, -1, -1, -1, -1,  2, -1,
        -1, -1, -1,  2, -1, -1,  2, -1,  1, -1,  1, -1, -1, -1, -1,  1, -1, -1,
        -1, -1, -1,  0,  2,  1, -1,  1], dtype=torch.int32)
tensor([[0, 1, 1,  ..., 0, 0, 0],
        [1, 0, 1,  ..., 0, 0, 0],
        [1, 1, 0,  ..., 0, 0, 0],
        ...,
        [0, 0, 0,  ..., 0, 0, 1],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 1, 0, 0]], device='cuda:0', dtype=torch.int8)
tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        ...,
        [0, 0, 0,  ..., 0, 0, 1],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 1, 0, 0]], device='cuda:0', dtype=torch.int8)
tensor([ 2,  2,  2,  2,  2,  2,  2,  2,  2, -1,  2,  2, -1,  2,  1,  2, -1, -1,
         2,  1, -1,  1,  1,  1, -1,  1,  2,  1,  1, -1, -1,  2, -1, -1, -1, -1,
         1,  2,  1,  2,  2, -1, -1, -1, -1,  1,  1, -1,  1, -1, -1, -1, -1,  2,
        -1, -1,  2, -1, -1,  2, -1, -1,  2,  2, -1, -1,  2,  2,  2, -1, -1, -1,
        -1,  2,  2, -1,  2, -1, -1,  2, -1,  2,  2,  2, -1,  2, -1,  2, -1,  1,
         2, -1,  2,  2, -1,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  2, -1, -1, -1, -1, -1, -1, -1,
         2, -1,  1, -1,  2, -1, -1, -1, -1,  2, -1, -1, -1, -1, -1,  2,  0,  2,
        -1,  1,  1,  2,  2,  2,  1,  1,  2,  1,  2,  2,  2,  2,  2,  2,  1,  2,
        -1, -1,  2,  1,  2,  1,  2,  1, -1,  1,  2,  1,  1, -1, -1,  1, -1, -1,
        -1, -1,  2,  2,  2, -1, -1, -1, -1,  2, -1,  2,  2, -1,  2, -1, -1, -1,
        -1,  2, -1, -1,  1,  2, -1, -1, -1, -1,  1,  1,  2, -1,  2, -1,  1, -1,
        -1, -1, -1,  2, -1,  1,  2,  2,  2,  1, -1, -1,  1, -1,  2, -1, -1, -1,
        -1,  2,  1, -1, -1, -1, -1, -1,  2, -1, -1, -1,  2, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1,  2,  2,  1, -1, -1, -1, -1, -1,  2, -1,
         2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
         2, -1, -1, -1, -1, -1, -1, -1, -1, -1,  2, -1, -1,  2, -1,  2,  2, -1,
        -1,  2,  2,  2, -1, -1,  2, -1, -1, -1, -1, -1,  2, -1, -1, -1, -1,  2,
        -1, -1,  2, -1,  1, -1,  1, -1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  0,
         2,  1, -1,  1,  1,  2,  1,  2,  1,  2,  2,  2,  2,  2,  2, -1, -1,  2,
         1,  2, -1, -1, -1,  2,  2,  2, -1,  2, -1,  2, -1,  2,  2, -1, -1,  2,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1,  2,  2, -1, -1, -1, -1,  1,  1, -1, -1, -1, -1,
         1, -1, -1, -1, -1, -1, -1,  1, -1,  2,  1,  1, -1, -1,  0, -1,  1, -1,
        -1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1, -1, -1, -1,  1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1, -1, -1, -1, -1, -1,
         1, -1,  1, -1, -1, -1, -1, -1,  2, -1,  2, -1, -1, -1,  2, -1, -1, -1,
        -1, -1,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1, -1, -1,  1, -1,  2,
         1, -1, -1,  2,  1,  1, -1, -1,  1, -1, -1, -1, -1, -1,  2, -1, -1, -1,
        -1,  1, -1, -1,  2, -1,  1, -1,  1, -1, -1, -1, -1,  1, -1, -1, -1, -1,
        -1,  1,  2,  1, -1,  1,  2, -1, -1, -1,  2,  2, -1, -1, -1,  2, -1, -1,
        -1, -1,  2, -1, -1, -1, -1, -1,  2, -1, -1,  2, -1, -1, -1,  2,  2, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  2, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1,  2, -1, -1, -1, -1, -1,  2,  1, -1, -1,
        -1, -1,  1, -1, -1, -1, -1, -1, -1,  1, -1,  1,  1,  1, -1, -1,  1, -1,
         1, -1, -1, -1, -1, -1,  2, -1, -1, -1, -1, -1,  1, -1, -1, -1,  1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  1, -1, -1, -1,
        -1, -1,  1, -1,  1, -1, -1, -1, -1, -1,  1, -1,  1, -1,  2, -1,  2, -1,
         2, -1, -1, -1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1, -1, -1,  1,
        -1,  1,  1, -1, -1,  1,  1,  1, -1, -1,  1, -1, -1, -1, -1, -1,  2, -1,
        -1, -1, -1,  2, -1, -1, -1, -1,  2, -1,  1, -1, -1, -1, -1,  2, -1, -1,
        -1, -1, -1,  2, -1,  2, -1,  2], dtype=torch.int32)
tensor([[0, 1, 1,  ..., 0, 0, 0],
        [1, 0, 1,  ..., 0, 0, 0],
        [1, 1, 0,  ..., 0, 0, 0],
        ...,
        [0, 0, 0,  ..., 0, 0, 1],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 1, 0, 0]], device='cuda:0', dtype=torch.int8)
tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        ...,
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0]], device='cuda:0', dtype=torch.int8)
outer
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True, False,  True, False,  True, False, False,  True, False,
        False, False, False, False, False, False,  True, False, False, False,
        False,  True, False, False, False, False, False,  True, False,  True,
         True, False, False, False, False, False, False, False, False, False,
        False, False, False,  True, False, False,  True, False, False,  True,
        False, False,  True,  True, False, False,  True,  True,  True, False,
        False, False, False,  True,  True, False,  True, False, False,  True,
        False,  True,  True,  True, False,  True, False,  True, False, False,
         True, False,  True,  True, False,  True, False, False, False, False,
        False, False, False, False, False, False, False, False, False, False,
        False, False, False, False, False, False,  True, False, False, False,
        False, False, False, False, False, False, False, False, False, False,
        False, False, False, False, False, False, False, False, False, False,
        False, False, False, False, False, False, False, False, False, False,
        False, False, False, False, False, False, False, False, False, False,
        False, False, False, False, False, False, False, False, False, False,
        False, False,  True, False, False, False, False, False, False, False,
         True, False, False, False,  True, False, False, False, False,  True,
        False, False, False, False, False,  True, False,  True, False, False,
        False,  True,  True,  True, False, False,  True, False,  True,  True,
         True,  True,  True,  True, False,  True, False, False,  True, False,
         True, False,  True, False, False, False,  True, False, False, False,
        False, False, False, False, False, False,  True,  True,  True, False,
        False, False, False,  True, False,  True,  True, False,  True, False,
        False, False, False,  True, False, False, False,  True, False, False,
        False, False, False, False,  True, False,  True, False, False, False,
        False, False, False,  True, False, False,  True,  True,  True, False,
        False, False, False, False,  True, False, False, False, False,  True,
        False, False, False, False, False, False,  True, False, False, False,
         True, False, False, False, False, False, False, False, False, False,
        False, False, False, False,  True,  True, False, False, False, False,
        False, False,  True, False,  True, False, False, False, False, False,
        False, False, False, False, False, False, False, False, False, False,
        False, False,  True, False, False, False, False, False, False, False,
        False, False,  True, False, False,  True, False,  True,  True, False,
        False,  True,  True,  True, False, False,  True, False, False, False,
        False, False,  True, False, False, False, False,  True, False, False,
         True, False, False, False, False, False, False, False, False, False,
        False, False, False, False, False, False,  True, False, False, False,
        False,  True, False,  True, False,  True,  True,  True,  True,  True,
         True, False, False,  True, False,  True, False, False, False,  True,
         True,  True, False,  True, False,  True, False,  True,  True, False,
        False,  True, False, False, False, False, False, False, False, False,
        False, False, False, False, False, False, False, False, False, False,
        False, False, False, False, False, False,  True,  True, False, False,
        False, False, False, False, False, False, False, False, False, False,
        False, False, False, False, False, False, False,  True, False, False,
        False, False, False, False, False, False, False, False, False, False,
        False, False, False, False, False, False, False, False, False, False,
        False, False, False, False, False, False, False, False, False, False,
        False, False, False, False, False, False, False, False, False, False,
        False, False, False, False, False, False, False, False, False, False,
         True, False,  True, False, False, False,  True, False, False, False,
        False, False,  True, False, False, False, False, False, False, False,
        False, False, False, False, False, False, False,  True, False, False,
        False,  True, False, False, False, False, False, False, False, False,
        False, False,  True, False, False, False, False, False, False, False,
         True, False, False, False, False, False, False, False, False, False,
        False, False, False, False, False, False,  True, False, False, False,
         True, False, False, False,  True,  True, False, False, False,  True,
        False, False, False, False,  True, False, False, False, False, False,
         True, False, False,  True, False, False, False,  True,  True, False,
        False, False, False, False, False, False, False, False, False, False,
        False, False, False,  True, False, False, False, False, False, False,
        False, False, False, False, False, False,  True, False, False, False,
        False, False,  True, False, False, False, False, False, False, False,
        False, False, False, False, False, False, False, False, False, False,
        False, False, False, False, False, False, False, False, False, False,
         True, False, False, False, False, False, False, False, False, False,
        False, False, False, False, False, False, False, False, False, False,
        False, False, False, False, False, False, False, False, False, False,
        False, False, False, False, False, False, False, False, False, False,
        False, False, False, False,  True, False,  True, False,  True, False,
        False, False, False, False, False, False, False, False, False, False,
        False, False, False, False, False, False, False, False, False, False,
        False, False, False, False, False, False, False, False, False, False,
        False, False,  True, False, False, False, False,  True, False, False,
        False, False,  True, False, False, False, False, False, False,  True,
        False, False, False, False, False,  True, False,  True, False,  True])
tensor([ 2,  2,  2,  2,  2,  2,  2,  2,  2, -1,  2,  2, -1,  2,  1,  2, -1, -1,
         2,  1, -1,  1,  1,  1, -1,  1,  2,  1,  1, -1, -1,  2, -1, -1, -1, -1,
         1,  2,  1,  2,  2, -1, -1, -1, -1,  1,  1, -1,  1, -1, -1, -1, -1,  2,
        -1, -1,  2, -1, -1,  2, -1, -1,  2,  2, -1, -1,  2,  2,  2, -1, -1, -1,
        -1,  2,  2, -1,  2, -1, -1,  2, -1,  2,  2,  2, -1,  2, -1,  2, -1,  1,
         2, -1,  2,  2, -1,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  2, -1, -1, -1, -1, -1, -1, -1,
         2, -1,  1, -1,  2, -1, -1, -1, -1,  2, -1, -1, -1, -1, -1,  2,  0,  2,
        -1,  1,  1,  2,  2,  2,  1,  1,  2,  1,  2,  2,  2,  2,  2,  2,  1,  2,
        -1, -1,  2,  1,  2,  1,  2,  1, -1,  1,  2,  1,  1, -1, -1,  1, -1, -1,
        -1, -1,  2,  2,  2, -1, -1, -1, -1,  2, -1,  2,  2, -1,  2, -1, -1, -1,
        -1,  2, -1, -1,  1,  2, -1, -1, -1, -1,  1,  1,  2, -1,  2, -1,  1, -1,
        -1, -1, -1,  2, -1,  1,  2,  2,  2,  1, -1, -1,  1, -1,  2, -1, -1, -1,
        -1,  2,  1, -1, -1, -1, -1, -1,  2, -1, -1, -1,  2, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1,  2,  2,  1, -1, -1, -1, -1, -1,  2, -1,
         2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
         2, -1, -1, -1, -1, -1, -1, -1, -1, -1,  2, -1, -1,  2, -1,  2,  2, -1,
        -1,  2,  2,  2, -1, -1,  2, -1, -1, -1, -1, -1,  2, -1, -1, -1, -1,  2,
        -1, -1,  2, -1,  1, -1,  1, -1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  0,
         2,  1, -1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  1,  1,  1,
         1,  1,  2, -1,  1,  2,  2,  2, -1,  1, -1,  1, -1,  1,  1, -1, -1,  0,
        -1, -1, -1, -1,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1,  2, -1, -1, -1,
        -1, -1, -1, -1, -1, -1,  2, -1, -1, -1, -1, -1,  2,  2, -1, -1, -1, -1,
         2, -1, -1, -1, -1, -1, -1,  2, -1, -1,  2,  2, -1, -1,  2, -1, -1, -1,
        -1, -1, -1, -1,  2, -1, -1, -1, -1, -1,  2, -1, -1, -1,  2, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  2,  2, -1, -1, -1, -1, -1,
         2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
         2, -1, -1, -1, -1, -1, -1, -1,  2, -1, -1, -1, -1, -1,  1, -1, -1, -1,
        -1,  2, -1, -1,  1, -1,  1, -1,  2, -1, -1, -1, -1,  1, -1, -1, -1, -1,
        -1,  1,  2,  1, -1,  1,  1,  2,  1,  2,  1,  2,  2,  2,  2,  2,  2, -1,
        -1,  2,  1,  2, -1, -1, -1,  2,  2,  2, -1,  2, -1,  2, -1,  2,  2, -1,
        -1,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1,  2,  2, -1, -1, -1, -1,  1,  1, -1, -1,
        -1, -1,  1, -1, -1, -1, -1, -1, -1,  1, -1,  2,  1,  1, -1, -1,  0, -1,
         1, -1, -1, -1, -1, -1,  1, -1, -1, -1, -1, -1,  1, -1, -1, -1,  1, -1,
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1,  1,  1, -1, -1, -1,
        -1, -1,  1, -1,  1, -1, -1, -1, -1, -1,  2, -1,  2, -1, -1, -1,  2, -1,
        -1, -1, -1, -1,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1, -1, -1,  1,
        -1,  2,  1, -1, -1,  2,  1,  1, -1, -1,  1, -1, -1, -1, -1, -1,  2, -1,
        -1, -1, -1,  1, -1, -1,  2, -1,  1, -1,  1, -1, -1, -1, -1,  1, -1, -1,
        -1, -1, -1,  1,  2,  1, -1,  1], dtype=torch.int32)
tensor([[0, 1, 1,  ..., 0, 0, 0],
        [1, 0, 1,  ..., 0, 0, 0],
        [1, 1, 0,  ..., 0, 0, 0],
        ...,
        [0, 0, 0,  ..., 0, 0, 1],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 1, 0, 0]], device='cuda:0', dtype=torch.int8)
tensor([[0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 0, 0, 0],
        ...,
        [0, 0, 0,  ..., 0, 0, 1],
        [0, 0, 0,  ..., 0, 0, 0],
        [0, 0, 0,  ..., 1, 0, 0]], device='cuda:0', dtype=torch.int8)
outer
tensor([ True,  True,  True,  True,  True,  True,  True,  True,  True, False,
         True,  True, False,  True, False,  True, False, False,  True, False,
        False, False, False, False, False, False,  True, False, False, False,
        False,  True, False, False, False, False, False,  True, False,  True,
         True, False, False, False, False, False, False, False, False, False,
        False, False, False,  True, False, False,  True, False, False,  True,
        False, False,  True,  True, False, False,  True,  True,  True, False,
        False, False, False,  True,  True, False,  True, False, False,  True,
        False,  True,  True,  True, False,  True, False,  True, False, False,
         True, False,  True,  True, False,  True, False, False, False, False,
        False, False, False, False, False, False, False, False, False, False,
        False, False, False, False, False, False,  True, False, False, False,
        False, False, False, False, False, False, False, False, False, False,
        False, False, False, False, False, False, False, False, False, False,
        False, False, False, False, False, False, False, False, False, False,
        False, False, False, False, False, False, False, False, False, False,
        False, False, False, False, False, False, False, False, False, False,
        False, False,  True, False, False, False, False, False, False, False,
         True, False, False, False,  True, False, False, False, False,  True,
        False, False, False, False, False,  True, False,  True, False, False,
        False,  True,  True,  True, False, False,  True, False,  True,  True,
         True,  True,  True,  True, False,  True, False, False,  True, False,
         True, False,  True, False, False, False,  True, False, False, False,
        False, False, False, False, False, False,  True,  True,  True, False,
        False, False, False,  True, False,  True,  True, False,  True, False,
        False, False, False,  True, False, False, False,  True, False, False,
        False, False, False, False,  True, False,  True, False, False, False,
        False, False, False,  True, False, False,  True,  True,  True, False,
        False, False, False, False,  True, False, False, False, False,  True,
        False, False, False, False, False, False,  True, False, False, False,
         True, False, False, False, False, False, False, False, False, False,
        False, False, False, False,  True,  True, False, False, False, False,
        False, False,  True, False,  True, False, False, False, False, False,
        False, False, False, False, False, False, False, False, False, False,
        False, False,  True, False, False, False, False, False, False, False,
        False, False,  True, False, False,  True, False,  True,  True, False,
        False,  True,  True,  True, False, False,  True, False, False, False,
        False, False,  True, False, False, False, False,  True, False, False,
         True, False, False, False, False, False, False, False, False, False,
        False, False, False, False, False, False,  True, False, False, False,
        False, False, False, False, False, False, False, False, False, False,
         True, False, False, False, False, False,  True, False, False,  True,
         True,  True, False, False, False, False, False, False, False, False,
        False, False, False, False, False, False,  True, False, False, False,
        False, False, False, False, False, False,  True, False, False, False,
        False, False, False, False, False, False,  True, False, False, False,
        False, False,  True,  True, False, False, False, False,  True, False,
        False, False, False, False, False,  True, False, False,  True,  True,
        False, False,  True, False, False, False, False, False, False, False,
         True, False, False, False, False, False,  True, False, False, False,
         True, False, False, False, False, False, False, False, False, False,
        False, False, False, False, False,  True,  True, False, False, False,
        False, False,  True, False, False, False, False, False, False, False,
        False, False, False, False, False, False, False, False, False, False,
        False, False, False, False, False, False, False, False, False, False,
        False, False, False, False, False, False, False, False,  True, False,
        False, False, False, False, False, False,  True, False, False, False,
        False, False, False, False, False, False, False,  True, False, False,
        False, False, False, False,  True, False, False, False, False, False,
        False, False, False, False, False, False,  True, False, False, False,
        False,  True, False,  True, False,  True,  True,  True,  True,  True,
         True, False, False,  True, False,  True, False, False, False,  True,
         True,  True, False,  True, False,  True, False,  True,  True, False,
        False,  True, False, False, False, False, False, False, False, False,
        False, False, False, False, False, False, False, False, False, False,
        False, False, False, False, False, False,  True,  True, False, False,
        False, False, False, False, False, False, False, False, False, False,
        False, False, False, False, False, False, False,  True, False, False,
        False, False, False, False, False, False, False, False, False, False,
        False, False, False, False, False, False, False, False, False, False,
        False, False, False, False, False, False, False, False, False, False,
        False, False, False, False, False, False, False, False, False, False,
        False, False, False, False, False, False, False, False, False, False,
         True, False,  True, False, False, False,  True, False, False, False,
        False, False,  True, False, False, False, False, False, False, False,
        False, False, False, False, False, False, False,  True, False, False,
        False,  True, False, False, False, False, False, False, False, False,
        False, False,  True, False, False, False, False, False, False, False,
         True, False, False, False, False, False, False, False, False, False,
        False, False, False, False, False, False,  True, False, False, False])
